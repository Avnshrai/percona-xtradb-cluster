--source include/galera_cluster.inc

#
# Ensure that the read_only option does not apply to Galera appliers and that replication
# continues, the way MySQL replication would.
#

CREATE TABLE t1 (id INT PRIMARY KEY) ENGINE=InnoDB;

--connection node_2
SET GLOBAL read_only=TRUE;

--connection node_1
INSERT INTO t1 VALUES (1);

--connection node_2
SELECT COUNT(*) = 1 FROM t1;

SET GLOBAL read_only=FALSE;

DROP TABLE t1;

#
# Ensure that the super_read_only option does not apply to Galera appliers and that replication
# continues, the way MySQL replication would.
#

CREATE TABLE t1 (id INT PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (id INT PRIMARY KEY) ENGINE=InnoDB;

--connection node_2
SET GLOBAL super_read_only=TRUE;

--connection node_1
INSERT INTO t1 VALUES (1);
DROP TABLE t2;

--connection node_2
SELECT COUNT(*) = 1 FROM t1;
--sleep 1
SHOW TABLES;

SET GLOBAL super_read_only=FALSE;
SET GLOBAL read_only=FALSE;

DROP TABLE t1;
#
# PXC-4041: Rotating InnoDB MK from a read_only node breaks the cluster
#

--connection node_1
--let super_read_only_saved = `SELECT @@super_read_only`
--let read_only_saved = `SELECT @@read_only`

# super_read_only
SET GLOBAL super_read_only=1;
--error ER_OPTION_PREVENTS_STATEMENT
ALTER INSTANCE ROTATE INNODB MASTER KEY;

# read_only
SET GLOBAL super_read_only=0;
SET GLOBAL read_only=1;

CREATE USER 'testuser'@'%' IDENTIFIED WITH 'mysql_native_password' BY 'testuser';
GRANT ENCRYPTION_KEY_ADMIN ON *.* to 'testuser'@'%';
--connect node_1a, 127.0.0.1, testuser, testuser, test, $NODE_MYPORT_1
--connection node_1a
--error ER_OPTION_PREVENTS_STATEMENT
ALTER INSTANCE ROTATE INNODB MASTER KEY;

--connection node_1
--eval SET global read_only = $read_only_saved
--eval SET global super_read_only = $super_read_only_saved
DROP USER 'testuser'@'%';

CALL mtr.add_suppression("Failed to replicate .* in cluster mode");
