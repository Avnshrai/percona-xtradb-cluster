#
# Test rotation of GCache Master Key
#

--source include/have_util_sed.inc
--source include/galera_cluster.inc

--connection node_1
--let $NODE1_DATA_DIR = `select @@datadir`
--connection node_2
--let $NODE2_DATA_DIR = `select @@datadir`

--connection node_1

# In this MTR suite the server is started with GCache encryption enabled
# The test may use server instance with already rotated MK.
# We will check Master Key rotations later in the test, so for making it easier
# to track rotations, force GCache reset. It will cause usage of key id 1.

# Spoil preamble CRC
--exec $SED -i "s/enc_crc:.*/enc_crc: 1234/" $NODE1_DATA_DIR/galera.cache
call mtr.add_suppression("Encryption header CRC mismatch");
--let $do_not_echo_parameters = 1
--let $restart_parameters = "restart: --wsrep_cluster_address=gcomm://127.0.0.1:$NODE_GALERAPORT_2 --wsrep_provider_options='base_port=$NODE_GALERAPORT_1;gcache.encryption=yes'"
--source include/restart_mysqld.inc
--source include/galera_wait_ready.inc

--connection node_2
--exec $SED -i "s/enc_crc:.*/enc_crc: 1234/" $NODE2_DATA_DIR/galera.cache
call mtr.add_suppression("Encryption header CRC mismatch");
--let $do_not_echo_parameters = 1
--let $restart_parameters = "restart: --wsrep_cluster_address=gcomm://127.0.0.1:$NODE_GALERAPORT_1 --wsrep_provider_options='base_port=$NODE_GALERAPORT_2;gcache.encryption=yes'"
--source include/restart_mysqld.inc
--source include/galera_wait_ready.inc

--connection node_1
CREATE TABLE t1(a INT PRIMARY KEY);

# Check that GCache ring buffer file content is encrypted
--let $assert_text = Assert that node_1 GCache is encrypted
--let $assert_file = $NODE1_DATA_DIR/galera.cache
--let $assert_select = enc_encrypted: 1
--let $assert_count = 1
--source include/assert_grep.inc

# Check that GCache ring buffer file is using MK id 1
--let $assert_text = Assert that node_1 GCache uses MK id 1
--let $assert_file = $NODE1_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 1
--let $assert_count = 1
--source include/assert_grep.inc

--connection node_2

# Check that GCache ring buffer file content is encrypted
--let $assert_text = Assert that node_2 GCache is encrypted
--let $assert_file = $NODE2_DATA_DIR/galera.cache
--let $assert_select = enc_encrypted: 1
--let $assert_count = 1
--source include/assert_grep.inc

# Check that GCache ring buffer file is using MK id 1
--let $assert_text = Assert that node_2 GCache uses MK id 1
--let $assert_file = $NODE2_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 1
--let $assert_count = 1
--source include/assert_grep.inc

ALTER INSTANCE ROTATE GCACHE MASTER KEY;

# Check that GCache ring buffer file is using MK id 2
--let $assert_text = Assert that node_2 GCache uses MK id 2
--let $assert_file = $NODE2_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 2
--let $assert_count = 1
--source include/assert_grep.inc

--connection node_1
# Check that GCache ring buffer file is using MK id 2
--let $assert_text = Assert that node_1 GCache uses MK id 2
--let $assert_file = $NODE1_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 2
--let $assert_count = 1
--source include/assert_grep.inc

# Stop node_2 and rotate MK on node_1, when node_2 is up again it should catch up with rotation.
--connection node_2
--source include/shutdown_mysqld.inc

--connection node_1
ALTER INSTANCE ROTATE GCACHE MASTER KEY;

# Check that GCache ring buffer file is using MK id 3
--let $assert_text = Assert that node_1 GCache uses MK id 3
--let $assert_file = $NODE1_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 3
--let $assert_count = 1
--source include/assert_grep.inc

--connection node_2
--source include/start_mysqld.inc
--source include/galera_wait_ready.inc

# Check that GCache ring buffer file is using MK id 3
--let $assert_text = Assert that node_2 GCache uses MK id 3
--let $assert_file = $NODE2_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 3
--let $assert_count = 1
--source include/assert_grep.inc

#
# Set WSREP_ON = OFF on node_1 and do MK rotation.
# WSREP_ON should not affect rotation on node_1,
# but it should not be replicated.
#
--connection node_1
SET SESSION WSREP_ON = OFF;
ALTER INSTANCE ROTATE GCACHE MASTER KEY;

# Check that GCache ring buffer file on node_1 is using MK id 4
--let $assert_text = Assert that node_1 GCache uses MK id 4
--let $assert_file = $NODE1_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 4
--let $assert_count = 1
--source include/assert_grep.inc

# Check that GCache ring buffer file on node_2 is still using MK id 3
--connection node_2
--let $assert_text = Assert that node_2 GCache uses MK id 3
--let $assert_file = $NODE2_DATA_DIR/galera.cache
--let $assert_select = enc_mk_id: 3
--let $assert_count = 1
--source include/assert_grep.inc

# cleanup
DROP TABLE t1;
